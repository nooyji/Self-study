thread
하나의 process에 여러 개의 thread 생성 가능
thread들은 동시에 실행 가능
process 안에 있으므로, process의 데이터를 모두 접근 가능

multi thread
소프트웨어 병행 작업 처리를 위해 multi thread를 사용함
스텝만 따로 가지고 가며 나머지는 공유함 (data, heap, code)

multi tasking, multi processing
멀티 태스킹은 하나의 CPU에서 여러 프로세스를 돌려서 실행
멀티 프로세싱은 하나의 프로세스를 여러개의 CPU를 실행시켜서 병령 실행시킴
멀티 프로세싱을 어떻게 여러개의 CPU가 접근할 수 있게 하는가?
멀티 스레드로 만들어서 각 CPU가 접근할 수 있도록 함

최근 CPU는 멀티 코어를 가지므로, Thread 를 여러 개 만들어, 멀티 코어를 활용도를 높임

Thread 장점
1. 사용자에 대한 응답성 향상
2. 자원 효율
-IPC 기법과 같이 프로세스간 자원 공유를 위해 번거로운 작업이 필요없음
-프로세스 안에 있으므로, 프로세스의 데이터를 모두 접근 가능
3. 작업이 분리되어 코드가 간결(작성하기 나름)
4. CPU 활용도가 높아짐

Thread 단점
1. 스레드 중 한 스레드만 문제가 있어도, 전체 프로세스가 영향을 받음 (멀티 프로세싱의 경우는 영향을 주지 않음)
2. 스레드를 많이 생성하면, Context Switching이 많이 일어나 성능 저하
예) 리눅스 OS에서는 Thread 를 Process 와 같이 다룸

Thread vs Process
1. 프로세스는 독립적, 스레드는 프로세스의 서브셋
2. 프로세스는 각각 독립적인 자원을 가짐, 스레드는 프로세스 자원 공유
3. 프로세스는 자신만의 주소 영역을 가짐, 스레드는 주소영역 공유
4. 프로세스 간에는 IPC 기법으로 통신해야 함, 스레드는 필요없음

필요한 경우만 스레드만 사용함(최소 권장)

