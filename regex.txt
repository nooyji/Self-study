문자 클래스 []

우리가 가장 먼저 살펴볼 메타 문자는 바로 문자 클래스(character class)인 []이다.
문자 클래스로 만들어진 정규식은 "[ ] 사이의 문자들과 매치"라는 의미를 갖는다.

문자 클래스를 만드는 메타 문자인 [] 사이에는 어떤 문자도 들어갈 수 있다.

즉 정규 표현식이 [abc]라면 이 표현식의 의미는 "a, b, c중 한 개의 문자와 매치"를 뜻한다.
이해를 돕기 위해 문자열 "a", "before", "dude"가 정규식 [abc]와 어떻게 매치되는지 살펴보자.

"a"는 정규식과 일치하는 문자인 "a"가 있으므로 매치
"before"는 정규식과 일치하는 문자인 "b"가 있으므로 매치
"dude"는 정규식과 일치하는 문자인 a, b, c중 어느 하나도 포함하고 있지 않으므로 매치되지 않음

[ ] 안의 두 문자 사이에 하이픈(-)을 사용하면 두 문자 사이의 범위(From - To)를 의미한다.
예를 들어 [a-c]라는 정규 표현식은 [abc]와 동일하고 [0-5]는 [012345]와 동일하다.

다음은 하이픈(-)을 사용한 문자 클래스의 사용 예이다.

[a-zA-z] : 알파벳 모두
[0-9] : 숫자

문자 클래스([ ]) 안에는 어떤 문자나 메타 문자도 사용할 수 있지만 주의해야 할 메타 문자가 1가지 있다.
그것은 바로 ^ 인데, 문자 클래스 안에 ^ 메타 문자를 사용할 경우에는 반대(not)라는 의미를 갖는다.
예를 들어 [^0-9] 라는 정규 표현식은 숫자가 아닌 문자만 매치된다.

[자주 사용하는 문자 클래스]

[0-9] 또는 [a-zA-Z] 등은 무척 자주 사용하는 정규 표현식이다.
이렇게 자주 사용하는 정규식은 별도의 표기법으로 표현할 수 있다.
다음을 기억해 두자.
\d - 숫자와 매치, [0-9]와 동일한 표현식이다.
\D - 숫자가 아닌 것과 매치, [^0-9] 와 동일한 표현식이다.
\s - whitespace 문자와 매치, [ \t\n\r\f\v] 와 동일한 표현식이다.
맨 앞의 빈 칸은 공백문자 (space)를 의미한다.
\S - whitespace 문자가 아닌 것과 매치, [^ \t\n\r\f\v]와 동일한 표현식이다.
\w - 문자+숫자(alphanumeric)와 매치, [a-zA-Z0-9_]와 동일한 표현식이다.
\W - 문자+숫자(alphanumeric)가 아닌 문자와 매치, [^a-zA-Z0-9_]와 동일한 표현식

대문자로 사용된 것은 소문자의 반대임을 추측할 수 있다.

Dot(.)
정규 표현식의 Dot(.) 메타 문자는 줄바꿈 문자인 \n 을 제외한 모든 문자와 매치됨을 의미한다.

정규식을 작성할 때 re.DOTALL 옵션을 주면 \n 문자와도 매치된다.

a.b
위 정규식의 의미는 다음과 같다.
"a + 모든문자 + b"

즉 a와 b라는 문자 사이에 어떤 문자가 들어가도 모두 매치된다는 의미이다.

이해를 돕기 위해 문자열 "aab", "a0b", "abc"가 정규식 a.b와 어떻게 매치되는지 살펴보자.

"aab"는 가운데 문자 "a"가 모든 문자를 의미하는 .과 일치하므로 정규식과 매치된다.
"a0b"는 가운데 문자 "0"가 모든 문자를 의미하는 .과 일치하므로 정규식과 매치된다.
"abc"는 "a"문자와 "b"문자 사이에 어떤 문자라도 하나는 있어야 하는 이 정규식과 일치하지 않으므로 매치되지 않는다.

a[.]b
이 정규식의 의미는 다음과 같다.
"a + Dot(.)문자 + b"

따라서 정규식 a[.]b는 "a.b" 문자열과 매치되고, "a0b" 문자열과는 매치되지 않는다.

만약 앞에서 살펴본 문자 클래스([]) 내에 Dot(.) 메타 문자가 사용된다면 이것은 "모든 문자" 라는 의미가 아닌 문자 . 그대로를 의미한다.

반복 (*)
ca*t
이 정규식에는 반복을 의미하는 *메타 문자가 사용되었다.
여기에서 사용한 *은 * 바로 앞에 있는 문자 a가 0부터 무한대로 반복될 수 있다는 의미

즉 다음과 같은 문자열이 모두 매치된다.

ct -> "a"가 0번 반복되어 매치
cat -> "a"가 0번 이상 반복되어 매치 (1번 반복)
caat -> "a"가 0번 이상 반복되어 매치 (3번 반복)

반복 (+)
반복을 나타내는 또 다른 메타 문자로 + 가 있다.
+는 최소 1번 이상 반복될 때 사용한다.
즉 *가 반복 횟수 0부터라면 +는 반복 횟수 1부터인 것이다.

ca+t
ct -> "a"가 0번 반복되어 매치되지 않음
cat -> "a"가 1번 이상 반복되어 매치 (1번 반복)
caaat -> "a"가 1번 이상 반복되어 매치 (3번 반복)

반복 ({m, n}, ?)
여기에서 잠깐 생각해 볼 게 있다.
반복 횟수를 3회만 또는 1회부터 3회까지만으로 제한하고 싶지 않을까?
{ } 메타 문자를 사용하면 반복 횟수를 고정 할 수 있다. {m, n} 정규식을 사용하면 반복 횟수가 m부터 n까지 매치할 수 있다.
또한 m 또는 n을 생략할 수도 있다.
만약 {3,}처럼 사용하면 반복 횟수가 3 이상인 경우이고 {,3}처럼 사용하면 반복 횟수가 3 이하를 의미한다.
생략된 m은 0과 동일하며, 생략된 n은 무한대(2억 개 미만)의 의미를 갖는다.

{1,}은 +와 동일하고, {0,}은 *와 동일하다.

{}을 사용한 몇 가지 정규식을 살펴보자.

1.{m}
ca{2}t
위 정규식의 의미는 다음과 같다.
"c + a(반드시 2번 반복) + t"

ca{2}t
cat -> "a"가 1번만 반복되어 매치되지 않음
caat -> "a"가 2번 반복되어 매치

2. {m, n}
ca{2,5}t
위 정규식의 의미는 다음과 같다.
"c + a(2~5회 반복) + t"

ca(2,5)t
cat -> "a"가 1번만 반복되어 매치되지 않음
caat -> "a"가 2번 반복되어 매치
caaaaat -> "a"가 5번 반복되어 매치

3. ?

반복은 아니지만 이와 비슷한 개념으로 ? 이 있다. ? 메타문자가 의미하는 것은 {0, 1} 이다.
다음 정규식을 보자
ab?c
위 정규식의 의미는 다음과 같다.
"a + b(있어도 되고 없어도 된다) + c"

ab?c
abc -> "b"가 1번 사용되어 매치
ac -> "b"가 0번 사용되어 매치

즉 b 문자가 있거나 없거나 둘 다 매치되는 경우이다.

*, +, ? 메타 문자는 모두 {m, n} 형태로 고쳐 쓰는 것이 가능하지만 가급적 이해하기 쉽고 표현도 간결한 *, +, ? 메타 문자를 사용하는 것이 좋다.

파이썬에서 정규 표현식을 지원하는 re 모듈

파이썬은 정규 표현식을 지원하기 위해 re{regular expression의 약어) 모듈을 제공한다.

import re
p = re.compile('ab*')

re.compile을 사용하여 정규 표현식 (위 예에서는 ab*)을 컴파일한다.
re.compile의 결과로 돌려주는 객체 p(컴파일된 패턴 객체)를 사용하여 그 이후의 작업을 수행할 것이다.

패턴이란 정규식을 컴파일한 결과

정규식을 이용한 문자열 검색
이제 컴파일된 패턴 객체를 사용하여 문자열 검색을 수행해보자.
컴파일된 패턴 객체는 다음과 같은 4가지 메서드를 제공한다.

match() -> 문자열의 처음부터 정규식과 매치되는지 조사한다.
search() -> 문자열 전체를 검색하여 정규식과 매치되는지 조사한다.
findall() -> 정규식과 매치되는 모든 문자열(substring)을 리스트로 돌려준다.
finditer() -> 정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체로 돌려준다.

match, search는 정규식과 매치될 때는 match 객체를 돌려주고, 매치되지 않을 때는 None을 돌려준다.
이들 메서드에 대한 간단한 예를 살펴보자.
match 객체란 정규식의 검색 결과로 돌려주는 객체이다.

우선 다음과 같은 패턴을 만들어 보자

import re
p = re.compile('[a-z]+')

match

match 메서드는 문자열의 처음부터 정규식과 매치되는지 조사한다. 위 패턴에 match 메서드를 수행해보자.
m = p.match("python")
print(m)
<_sre.SRE_Match object at 0x01F3F9F8>

"python" 문자열은 [a-z]+ 정규식에 부합되므로 match 객체를 돌려준다.

m = p.match("3 python")
print(m)
None

"3 python" 문자열은 처음에 나오는 문자 3이 정규식 [a-z]+에 부합되지 않으므로 None을 돌려준다.

match의 결과로 match 객체 또는 None을 돌려주기 때문에 파이썬 정규식 프로그램을 if-else로 작성할 수 있다.

search

컴파일된 패턴 객체 p를 가지고 이번에는 search 메서드를 수행해보자

m = p.search("python")
print(m)
<_sre.SRE_Match object at 0x01F3FA68>

"python" 문자열에 search 메서드를 수행하면 match 메서드를 수행했을 때와 동일하게 매치된다.
m = p.search("3 python")
print(m)
<_sre.SRE_Match object at 0x01F3FA30>

"3 python" 문자열의 첫 번째 문자는 "3"이지만 search는 문자여르이 처음부터 검색하는 것이 아니라 문자열 전체를 검색하기 때문에
"3" 이후의 "python" 문자열과 매치된다.

이렇듯 match 메서드와 search 메서드는 문자열의 처음부터 검색할지의 여부에 따라 다르게 사용해야 한다.

findall

result = p.findall("life is too short")
print(result)
['life', 'is', 'too', 'short']

"life is too short" 문자열의 'life', 'is', 'too', 'short' 단어를 각각 [a-z]+ 정규식과 매치해서 리스트로 돌려준다.

finditer

result = p.finditer("life is too short")
print(result)
<callable_iterator object at 0x01F5E390>
for r in result: print(r)
...
<_sre.SRE_Match object at 0x01F3F9F8>
<_sre.SRE_Match object at 0x01F3FAD8>
<_sre.SRE_Match object at 0x01F3FAA0>
<_sre.SRE_Match object at 0x01F3F9F8>

finditer는 findall과 동일하지만 그 결과로 반복 가능한 객체 (iterator object)를 돌려준다.
반복 가능한 객체가 포함하는 각각의 요소는 match 객체이다.

match 객체의 메서드

match 메서드와 search 메서드를 수행한 결과로 돌려준 match 객체에 대해 알아보자.

어떤 문자열이 매치되었는가?
매치된 문자열의 인덱스는 어디서부터 어디까지인가?

match 객체의 메서드를 사용하면 이 같은 궁금증을 해결할 수 있다.

group() -> 매치된 문자열을 돌려준다.
start() -> 매치된 문자열의 시작 위치를 돌려준다.
end() -> 매치된 문자열의 끝 위치를 돌려준다.
span() -> 매치된 문자열의 (시작, 끝)에 해당하는 튜플을 돌려준다.

다음 예로 확인해 보자.
m = p.match("python")
m.group()
'python'
m.start()
0
m.end()
6
m.span()
(0, 6)

예상한 대로 결괏값이 출력되는 것을 확인할 수 있다.
match 메서드를 수행한 결과로 돌려준 match 객체의 start()의 결괏값은 항상 0일 수밖에 없다.
왜냐하면 match 메서드는 항상 문자열의 시작부터 조사하기 때문이다.

만약 search 메서드를 사용했다면 start() 값은 다음과 같이 다르게 나올 것이다.

m = p.search("3 python")
m.group()
'python'
m.start()
2
m.end()
8
m.span()
(2, 8)

[모듈 단위로 수행하기]

지금까지 우리는 re.compile 을 사용하여 컴파일된 패턴 객체로 그 이후의 작업을 수행했다.
re 모듈은 이것을 좀 축약한 형태로 사용할 수 있는 방법을 제공한다. 다음 예를 보자.
p = re.compile('[a-z]+')
m = p.match("python")

위 코드가 축약된 형태는 다음과 같다.
m = re.match('[a-z]+', "python")

위 예처럼 사용하면 컴파일과 match 메서드를 한 번에 수행할 수 있다. 보통 한 번 만든 패턴 객체를 여러번 사용해야 할 때는 이 방법보다
re.compile 을 사용하는 것이 편하다.

컴파일 옵션

정규식을 컴파일할 때 다음 옵션을 사용할 수 있다.

DOTALL(S) - .이 줄바꿈 문자를 포함하여 모든 문자와 매치할 수 있도록 한다.
IGNORECASE(I) - 대소문자에 관계없이 매치할 수 있도록 한다.
MULTILINE(M) - 여러줄과 매치할 수 있도록 한다. (^, $ 메타문자의 사용과 관계가 있는 옵션이다)
VERBOSE(X) - verbose 모드를 사용할 수 있도록 한다. (정규식을 보기 편하게 만들 수 있고 주석 등을 사용할 수 있게된다.)

옵션을 사용할 때는 re.DOTALL처럼 전체 옵션 이름을 써도 되고 re.S처럼 약어를 써도 된다.

DOTALL, S

. 메타 문자는 줄바꿈 문자(\n)를 제외한 모든 문자와 매치되는 규칙이 있다. 만약 \n 문자도 포함하여 매치하고 싶다면 re.DOTALL 또는 re.S 옵션을 사용해
정규식을 컴파일하면 된다.

import re
p = re.compile('a.b')
m = p.match('a\nb')
print(m)
None

정규식이 a.b인 경우 문자열 a\nb는 매치되지 않음을 알 수 있다. 왜냐하면 \n은 .메타 문자와 매치되지 않기 때문이다.
\n 문자와도 매치되게 하려면 다음과 같이 re.DOTALL 옵션을 사용해야 한다. 
